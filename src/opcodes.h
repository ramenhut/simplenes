
/*
// Copyright (c) 1998-2008 Joe Bertolami. All Right Reserved.
//
// opcodes.h
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright notice, this
//     list of conditions and the following disclaimer.
//
//   * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Additional Information:
//
//   For more information, visit http://www.bertolami.com.
*/

#ifndef __OP_TABLES_H__
#define __OP_TABLES_H__

#include "base.h"
#include "cpu.h"
#include "bus.h"

#define ADDRESS_MODE_INVALID                        (0x0)    // 
#define ADDRESS_MODE_ABSOLUTE                       (0x1)    // [pc + 1]
#define ADDRESS_MODE_ABSOLUTE_X_INDEXED             (0x2)    // [pc + 1] + x
#define ADDRESS_MODE_ABSOLUTE_Y_INDEXED             (0x3)    // [pc + 1] + y
#define ADDRESS_MODE_ACCUMULATOR                    (0x4)    // 
#define ADDRESS_MODE_IMMEDIATE                      (0x5)    // pc + 1
#define ADDRESS_MODE_IMPLIED                        (0x6)    // 
#define ADDRESS_MODE_INDIRECT                       (0x7)    // [[pc + 1]] - only used for JMP  
#define ADDRESS_MODE_INDIRECT_PRE_X_INDEXED         (0x8)    // [[pc + 1] + x] - addr is zero page
#define ADDRESS_MODE_INDIRECT_POST_Y_INDEXED        (0x9)    // [[pc + 1]] + y - addr is zero page
#define ADDRESS_MODE_RELATIVE                       (0xA)    // pc + [pc + 1]
#define ADDRESS_MODE_ZERO_PAGE                      (0xB)    // [pc + 1]
#define ADDRESS_MODE_ZERO_PAGE_X_INDEXED            (0xC)    // [pc + 1] + x
#define ADDRESS_MODE_ZERO_PAGE_Y_INDEXED            (0xD)    // [pc + 1] + y

namespace nes {

using namespace base;

static const char *op_name_table[256] = 
{
    "BRK",  "OR ",  "INV",  "INV",  "INV",  "OR ",  "ASL",  "INV", 
    "PHP",  "OR ",  "ASL",  "INV",  "INV",  "OR ",  "ASL",  "INV",
    "BPL",  "OR ",  "INV",  "INV",  "INV",  "OR ",  "ASL",  "INV", 
    "CLC",  "OR ",  "INV",  "INV",  "INV",  "OR ",  "ASL",  "INV",
    "JSR",  "AND",  "INV",  "INV",  "BIT",  "AND",  "ROL",  "INV", 
    "PLP",  "AND",  "ROL",  "INV",  "BIT",  "AND",  "ROL",  "INV",
    "BMI",  "AND",  "INV",  "INV",  "INV",  "AND",  "ROL",  "INV", 
    "SEC",  "AND",  "INV",  "INV",  "INV",  "AND",  "ROL",  "INV",
    "RTI",  "EOR",  "INV",  "INV",  "INV",  "EOR",  "LSR",  "INV", 
    "PHA",  "EOR",  "LSR",  "INV",  "JMP",  "EOR",  "LSR",  "INV",
    "BVC",  "EOR",  "INV",  "INV",  "INV",  "EOR",  "LSR",  "INV", 
    "CLI",  "EOR",  "INV",  "INV",  "INV",  "EOR",  "LSR",  "INV",
    "RTS",  "ADC",  "INV",  "INV",  "INV",  "ADC",  "ROR",  "INV", 
    "PLA",  "ADC",  "ROR",  "INV",  "JMP",  "ADC",  "ROR",  "INV",
    "BVS",  "ADC",  "INV",  "INV",  "INV",  "ADC",  "ROR",  "INV", 
    "SEI",  "ADC",  "INV",  "INV",  "INV",  "ADC",  "ROR",  "INV",
    "INV",  "STA",  "INV",  "INV",  "STY",  "STA",  "STX",  "INV",
    "DEY",  "INV",  "TXA",  "INV",  "STY",  "STA",  "STX",  "INV",
    "BCC",  "STA",  "INV",  "INV",  "STY",  "STA",  "STX",  "INV", 
    "TYA",  "STA",  "TXS",  "INV",  "INV",  "STA",  "INV",  "INV",
    "LDY",  "LDA",  "LDX",  "INV",  "LDY",  "LDA",  "LDX",  "INV",
    "TAY",  "LDA",  "TAX",  "INV",  "LDY",  "LDA",  "LDX",  "INV",
    "BCS",  "LDA",  "INV",  "INV",  "LDY",  "LDA",  "LDX",  "INV",  
    "CLV",  "LDA",  "TSX",  "INV",  "LDY",  "LDA",  "LDX",  "INV",
    "CPY",  "CMP",  "INV",  "INV",  "CPY",  "CMP",  "DEC",  "INV", 
    "INY",  "CMP",  "DEX",  "INV",  "CPY",  "CMP",  "DEC",  "INV",
    "BNE",  "CMP",  "INV",  "INV",  "INV",  "CMP",  "DEC",  "INV", 
    "CLD",  "CMP",  "INV",  "INV",  "INV",  "CMP",  "DEC",  "INV",
    "CPX",  "SBC",  "INV",  "INV",  "CPX",  "SBC",  "INC",  "INV", 
    "INX",  "SBC",  "NOP",  "INV",  "CPX",  "SBC",  "INC",  "INV",
    "BEQ",  "SBC",  "INV",  "INV",  "INV",  "SBC",  "INC",  "INV", 
    "SED",  "SBC",  "INV",  "INV",  "INV",  "SBC",  "INC",  "INV",  
};

static const uint8 op_length_table[256] = 
{
    0x1,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x3,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x1,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x1,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x0,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x0,  0x3,  0x0,  0x0,  
    0x2,  0x2,  0x2,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x2,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
    0x2,  0x2,  0x0,  0x0,  0x2,  0x2,  0x2,  0x0,  0x1,  0x3,  0x1,  0x0,  0x3,  0x3,  0x3,  0x0,  
};

static const uint8 op_cycle_table[256] = 
{
    0x7,  0x6,  0x0,  0x0,  0x0,  0x3,  0x5,  0x0,  0x3,  0x2,  0x2,  0x0,  0x0,  0x4,  0x6,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,
    0x6,  0x6,  0x0,  0x0,  0x3,  0x3,  0x5,  0x0,  0x4,  0x2,  0x2,  0x0,  0x4,  0x4,  0x6,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,
    0x6,  0x6,  0x0,  0x0,  0x0,  0x3,  0x5,  0x0,  0x3,  0x2,  0x2,  0x0,  0x3,  0x4,  0x6,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,
    0x6,  0x6,  0x0,  0x0,  0x0,  0x3,  0x5,  0x0,  0x4,  0x2,  0x2,  0x0,  0x5,  0x4,  0x6,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,
    0x0,  0x6,  0x0,  0x0,  0x3,  0x3,  0x3,  0x0,  0x2,  0x0,  0x2,  0x0,  0x4,  0x4,  0x4,  0x0,
    0x2,  0x6,  0x0,  0x0,  0x4,  0x4,  0x4,  0x0,  0x2,  0x5,  0x2,  0x0,  0x0,  0x5,  0x0,  0x0,
    0x2,  0x6,  0x2,  0x0,  0x3,  0x3,  0x3,  0x0,  0x2,  0x2,  0x2,  0x0,  0x4,  0x4,  0x4,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x4,  0x4,  0x4,  0x0,  0x2,  0x4,  0x2,  0x0,  0x4,  0x4,  0x4,  0x0,
    0x2,  0x6,  0x0,  0x0,  0x3,  0x3,  0x5,  0x0,  0x2,  0x2,  0x2,  0x0,  0x4,  0x4,  0x6,  0x0,
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,  
    0x2,  0x6,  0x0,  0x0,  0x3,  0x3,  0x5,  0x0,  0x2,  0x2,  0x2,  0x0,  0x4,  0x4,  0x6,  0x0,  
    0x2,  0x5,  0x0,  0x0,  0x0,  0x4,  0x6,  0x0,  0x2,  0x4,  0x0,  0x0,  0x0,  0x4,  0x7,  0x0,  
};

static const uint8 op_address_mode_table[256] = 
{
    0x6,  0x8,  0x0,  0x0,  0x0,  0xB,  0xB,  0x0,  0x6,  0x5,  0x4,  0x0,  0x0,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0, 
    0x1,  0x8,  0x0,  0x0,  0xB,  0xB,  0xB,  0x0,  0x6,  0x5,  0x4,  0x0,  0x1,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0, 
    0x6,  0x8,  0x0,  0x0,  0x0,  0xB,  0xB,  0x0,  0x6,  0x5,  0x4,  0x0,  0x1,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0,
    0x6,  0x8,  0x0,  0x0,  0x0,  0xB,  0xB,  0x0,  0x6,  0x5,  0x4,  0x0,  0x7,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0,
    0x0,  0x8,  0x0,  0x0,  0xB,  0xB,  0xB,  0x0,  0x6,  0x0,  0x6,  0x0,  0x1,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0xC,  0xC,  0xD,  0x0,  0x6,  0x3,  0x6,  0x0,  0x0,  0x2,  0x0,  0x0,
    0x5,  0x8,  0x5,  0x0,  0xB,  0xB,  0xB,  0x0,  0x6,  0x5,  0x6,  0x0,  0x1,  0x1,  0x1,  0x0, 
    0xA,  0x9,  0x0,  0x0,  0xC,  0xC,  0xD,  0x0,  0x6,  0x3,  0x6,  0x0,  0x2,  0x2,  0x3,  0x0, 
    0x5,  0x8,  0x0,  0x0,  0xB,  0xB,  0xB,  0x0,  0x6,  0x5,  0x6,  0x0,  0x1,  0x1,  0x1,  0x0,
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0, 
    0x5,  0x8,  0x0,  0x0,  0xB,  0xB,  0xB,  0x0,  0x6,  0x5,  0x6,  0x0,  0x1,  0x1,  0x1,  0x0,
    0xA,  0x9,  0x0,  0x0,  0x0,  0xC,  0xC,  0x0,  0x6,  0x3,  0x0,  0x0,  0x0,  0x2,  0x2,  0x0,
};

// arithmetic opcodes
void _execute_opcode_adc(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_and(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_asl(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_cmp(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_cpx(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_cpy(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_dec(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_dex(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_dey(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_eor(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_inc(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_inx(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_iny(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_lsr(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_ora(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_rol(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_ror(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_sbc(uint16 operand_address, system_bus *bus, cpu_register_set &registers);

void _execute_opcode_acc_asl(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_acc_lsr(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_acc_rol(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_acc_ror(uint16 operand_address, system_bus *bus, cpu_register_set &registers);

// branch opcodes
void _execute_opcode_bcc(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bcs(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_beq(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bmi(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bne(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bpl(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bvc(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_bvs(uint16 operand_address, system_bus *bus, cpu_register_set &registers);

// control opcodes
void _execute_opcode_bit(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_brk(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_jmp(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_jsr(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_pha(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_php(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_pla(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_plp(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_rti(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_rts(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_int(uint16 operand_address, system_bus *bus, cpu_register_set &registers);

// transfer opcodes
void _execute_opcode_lda(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_ldx(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_ldy(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_sta(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_stx(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_sty(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_tax(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_tay(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_tsx(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_txa(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_txs(uint16 operand_address, system_bus *bus, cpu_register_set &registers);
void _execute_opcode_tya(uint16 operand_address, system_bus *bus, cpu_register_set &registers);

} // namespace nes

#endif // __OP_TABLES_H__